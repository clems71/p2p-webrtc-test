{"version":3,"sources":["../node_modules/peerjs/dist sync","App.tsx","reportWebVitals.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","randomId","a","Math","random","toString","substring","b","MessagingPeer","username","peerId","peer","connections","Map","conversation","isLoading","lastError","PeerIDSeed","_","kebabCase","Peer","on","error","console","type","emit","conn","debug","handleNewConnection","connectToPeer","this","has","opts","metadata","peerIds","Array","from","serialization","connect","forEach","data","each","lines","uniqBy","l","delete","set","seedsMsg","send","initialConv","msg","loading","line","content","sender","push","newMsg","EventEmitter","LoginPage","props","useState","name","setName","slug","placeholder","value","onChange","evt","target","readOnly","className","disabled","length","onClick","preventDefault","onLogin","ChatPage","messagesEndRef","useRef","setPeer","setUpdateTime","useEffect","p","now","useMessagingPeer","currentLine","setCurrentLine","chatHistory","chat","map","join","current","scrollIntoView","behavior","scrollToBottom","onSubmit","sendMessage","style","height","overflow","ref","App","appState","setAppState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mHAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,I,yLCenBC,EAAW,WACf,IAAMC,EAAIC,KAAKC,SAASC,SAAS,IAAIC,UAAU,GACzCC,EAAIJ,KAAKC,SAASC,SAAS,IAAIC,UAAU,GAC/C,MAAM,GAAN,OAAUJ,EAAV,YAAeK,IAGXC,E,kDAUJ,WAAoBC,GAAoB,IAAD,8BACrC,gBADkBA,WAAmB,EAP/BC,YAO+B,IAN/BC,UAM+B,IAL/BC,YAA2C,IAAIC,IAKhB,EAJ/BC,aAA2B,GAII,EAH/BC,WAAY,EAGmB,EAF/BC,UAA2B,KAKjC,EAAKN,OAASD,EAAQ,UACfD,EAAcS,WADC,YACaC,IAAEC,UAAUV,IAC3CD,EAAcS,WAClB,EAAKN,KAAO,IAAIS,IAAK,EAAKV,QAG1B,EAAKC,KAAKU,GAAG,SAAS,SAACC,GACrBC,QAAQD,MAAMA,GAEd,EAAKP,WAAY,EAEE,qBAAfO,EAAME,KACR,EAAKR,UAAL,sBACwB,mBAAfM,EAAME,KACf,EAAKR,UAAL,UAAoB,EAAKN,OAAzB,qBAEA,EAAKM,UAAYM,EAGnB,EAAKG,KAAK,aAIZ,EAAKd,KAAKU,GAAG,cAAc,SAACK,GAC1BH,QAAQI,MAAR,WAAkB,EAAKjB,OAAvB,kBAAuCgB,EAAKf,KAA5C,gBACA,EAAKiB,oBAAoBF,MAI3B,EAAKf,KAAKU,GAAG,QAAQ,WACnB,EAAKN,WAAY,EACjB,EAAKC,UAAY,KACjBO,QAAQI,MAAR,WAAkB,EAAKjB,OAAvB,gBAEA,EAAKe,KAAK,UAGV,EAAKI,cAAcrB,EAAcS,eAxCE,E,iDA4CvC,SAAsBP,GAEpB,IAAIoB,KAAKlB,YAAYmB,IAAIrB,IAAWA,IAAWoB,KAAKpB,OAApD,CAEAa,QAAQI,MAAR,WAAkBG,KAAKpB,OAAvB,2BAAgDA,IAEhD,IAAMsB,EAA0B,CAC9BC,SAAU,CACRC,QAASC,MAAMC,KAAKN,KAAKlB,YAAYhB,SAEvCyC,cAAe,QAEXX,EAAOI,KAAKnB,KAAK2B,QAAQ5B,EAAQsB,GACvCF,KAAKF,oBAAoBF,M,iCAG3B,SAA4BA,GAAuB,IAAD,SAE5CI,KAAKlB,YAAYmB,IAAIL,EAAKf,SAEP,UAAGe,EAAKO,SAASC,eAAjB,QAA4B,IAC3CK,SAAQ,SAAC7B,GAAD,OAAY,EAAKmB,cAAcnB,MAE/CgB,EAAKL,GAAG,QAAQ,SAACmB,GACfjB,QAAQI,MAAR,WACM,EAAKjB,OADX,kBAC2BgB,EAAKf,KADhC,gCAC4D6B,EAAKhB,OAG/C,UAAdgB,EAAKhB,KACPN,IAAEuB,KAAKD,EAAKN,SAAS,SAACxB,GAAD,OAAY,EAAKmB,cAAcnB,MAC7B,SAAd8B,EAAKhB,OACd,EAAKV,aAAL,sBAAwB,EAAKA,cAA7B,YAA8C0B,EAAKE,QACnD,EAAK5B,aAAeI,IAAEyB,OAAO,EAAK7B,cAAc,SAAC8B,GAAD,OAAOA,EAAE5C,OAG3D,EAAKyB,KAAK,aAGZC,EAAKL,GAAG,SAAS,kBAAM,EAAKT,YAAYiC,OAAOnB,EAAKf,SACpDe,EAAKL,GAAG,SAAS,kBAAM,EAAKT,YAAYiC,OAAOnB,EAAKf,SAEpDe,EAAKL,GAAG,QAAQ,WACd,EAAKT,YAAYkC,IAAIpB,EAAKf,KAAMe,GAEhC,IAAMqB,EAAyB,CAC7BvB,KAAM,QACNU,QAASC,MAAMC,KAAK,EAAKxB,YAAYhB,SAEvC,EAAKoD,KAAKD,GAEV,IAAME,EAA2B,CAC/BzB,KAAM,OACNkB,MAAO,EAAK5B,cAEd,EAAKkC,KAAKC,GAEV1B,QAAQI,MAAR,WAAkB,EAAKjB,OAAvB,kBAAuCgB,EAAKf,KAA5C,qB,kBAIJ,SAAauC,GACXpB,KAAKlB,YAAY2B,SAAQ,SAACb,GACxBA,EAAKsB,KAAKE,Q,iBAId,WACE,OAAOpB,KAAKd,Y,mBAGd,WACE,OAAOc,KAAKf,Y,gBAGd,WACE,OAAOe,KAAKhB,e,yBAGd,SAAmBoC,GAAc,IAAD,EAC9B,GAAIpB,KAAKqB,QAAS,MAAM,IAAIzD,MAAM,iBAElC,IAAM0D,EAAO,CACXpD,GAAIC,IACJoD,QAASH,EACTI,OAAM,UAAExB,KAAKrB,gBAAP,QAAmB,QAE3BqB,KAAKhB,aAAayC,KAAKH,GAEvB,IAAMI,EAAsB,CAC1BhC,KAAM,OACNkB,MAAO,CAACU,IAEVtB,KAAKkB,KAAKQ,O,GAlJcC,KAAtBjD,EACWS,WAAa,eAsJZ,IAAIT,EAAtB,IAyBMkD,EAAY,SAACC,GAA2B,IAAD,EACnBC,mBAAS,IADU,mBACpCC,EADoC,KAC9BC,EAD8B,KAErCC,EAAO7C,IAAEC,UAAU0C,GAEzB,OACE,8BACE,+BACE,qCACE,8CACA,uBACErC,KAAK,OACLwC,YAAY,iBACZC,MAAOJ,EACPK,SAAU,SAACC,GAAD,OAASL,EAAQK,EAAIC,OAAOH,UAExC,mDACA,uBAAOzC,KAAK,OAAOyC,MAAOF,EAAMM,UAAU,IAC1C,uBACEC,UAAU,iBACV9C,KAAK,SACLyC,MAAM,UACNM,SAAUR,EAAKS,OAAS,EACxBC,QAAS,SAAChF,GACRA,EAAEiF,iBACEf,EAAMgB,SAAShB,EAAMgB,QAAQZ,cAazCa,EAAW,SAACjB,GAA0B,IAAD,EACnCkB,EAAiBC,iBAAuB,MAMxCnE,EAnEiB,SAACoD,GAAkB,IAAD,EACjBH,qBADiB,mBAClCjD,EADkC,KAC5BoE,EAD4B,OAEfnB,qBAAjBoB,EAFgC,oBAUzC,OANAC,qBAAU,WACR,IAAMC,EAAI,IAAI1E,EAAcuD,GAC5BmB,EAAE7D,GAAG,UAAU,kBAAM2D,EAAc9D,IAAEiE,UACrCJ,EAAQG,KACP,CAACnB,IAEGpD,EAyDMyE,CAAiBzB,EAAMI,MAPK,EAQHH,mBAAiB,IARd,mBAQlCyB,EARkC,KAQrBC,EARqB,KAWnCC,GADI,iBAAG5E,QAAH,IAAGA,OAAH,EAAGA,EAAM6E,YAAT,QAAiB,IACFC,KAAI,SAAC7C,GAAD,gBAAUA,EAAEU,OAAZ,aAAuBV,EAAES,YAAWqC,KAAK,MAItE,OAFAT,qBAAU,kBAVa,WAAO,IAAD,EAC3B,UAAAJ,EAAec,eAAf,SAAwBC,eAAe,CAAEC,SAAU,WASrCC,KAAkB,CAACP,IAGjC,gCACE,qCACE,yCACU,iCAAS5B,EAAMI,OADzB,UAIG,OAAJpD,QAAI,IAAJA,OAAA,EAAAA,EAAMwC,UACL,sBACE4C,SAAU,SAACtG,GACTA,EAAEiF,iBACE,OAAJ/D,QAAI,IAAJA,KAAMqF,YAAYX,GAClBC,EAAe,KAJnB,SAOE,qCACE,sBAAKW,MAAO,CAAEC,OAAQ,IAAKC,SAAU,UAArC,UACGZ,EACD,qBAAKa,IAAKvB,OAEZ,uBACErD,KAAK,OACLwC,YAAY,kBACZC,MAAOoB,EACPnB,SAAU,SAACC,GAAD,OAASmB,EAAenB,EAAIC,OAAOH,mBA+B5CoC,MAtBf,WAAgB,IAAD,EACmBzC,mBAAmB,CAAEpC,KAAM,UAD9C,mBACN8E,EADM,KACIC,EADJ,KAGb,OACE,sBAAKjC,UAAU,YAAf,UACE,2CACA,qHAImB,UAAlBgC,EAAS9E,MACR,cAAC,EAAD,CACEmD,QAAS,SAACZ,GACRwC,EAAY,CAAE/E,KAAM,OAAQuC,YAIf,SAAlBuC,EAAS9E,MAAmB,cAAC,EAAD,CAAUuC,KAAMuC,EAASvC,WCrS7CyC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e1072cdf.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 22;","import React, { useEffect, useRef, useState } from 'react';\nimport _ from 'lodash';\nimport Peer, { DataConnection, PeerConnectOption } from 'peerjs';\nimport EventEmitter from 'events';\n\ntype SeedsMessage = {\n  type: 'seeds';\n  peerIds: string[];\n};\n\ntype ChatLine = {\n  id: string;\n  sender: string;\n  content: string;\n};\n\ntype ChatMessage = {\n  type: 'chat';\n  lines: ChatLine[];\n};\n\ntype Message = SeedsMessage | ChatMessage;\n\nconst randomId = () => {\n  const a = Math.random().toString(36).substring(7);\n  const b = Math.random().toString(36).substring(7);\n  return `${a}-${b}`;\n};\n\nclass MessagingPeer extends EventEmitter {\n  private static PeerIDSeed = '407d10227d90';\n\n  private peerId: string;\n  private peer: Peer;\n  private connections: Map<string, DataConnection> = new Map();\n  private conversation: ChatLine[] = [];\n  private isLoading = true;\n  private lastError: string | null = null;\n\n  constructor(private username?: string) {\n    super();\n\n    this.peerId = username\n      ? `${MessagingPeer.PeerIDSeed}-${_.kebabCase(username)}`\n      : MessagingPeer.PeerIDSeed;\n    this.peer = new Peer(this.peerId);\n\n    // When there is an error\n    this.peer.on('error', (error) => {\n      console.error(error);\n\n      this.isLoading = false;\n\n      if (error.type === 'peer-unavailable') {\n        this.lastError = `peer is unreachable`; // if connection with new peer can't be established\n      } else if (error.type === 'unavailable-id') {\n        this.lastError = `${this.peerId} is already taken`;\n      } else {\n        this.lastError = error;\n      }\n\n      this.emit('update');\n    });\n\n    // When a peer connects to us\n    this.peer.on('connection', (conn) => {\n      console.debug(`[${this.peerId}] peer ${conn.peer} reached us`);\n      this.handleNewConnection(conn);\n    });\n\n    // When the connection is properly open\n    this.peer.on('open', () => {\n      this.isLoading = false;\n      this.lastError = null;\n      console.debug(`[${this.peerId}] connected`);\n\n      this.emit('update');\n\n      // Connect to known seed\n      this.connectToPeer(MessagingPeer.PeerIDSeed);\n    });\n  }\n\n  private connectToPeer(peerId: string) {\n    // Already in the pool\n    if (this.connections.has(peerId) || peerId === this.peerId) return;\n\n    console.debug(`[${this.peerId}] connecting to ${peerId}`);\n\n    const opts: PeerConnectOption = {\n      metadata: {\n        peerIds: Array.from(this.connections.keys()),\n      },\n      serialization: 'json',\n    };\n    const conn = this.peer.connect(peerId, opts);\n    this.handleNewConnection(conn);\n  }\n\n  private handleNewConnection(conn: DataConnection) {\n    // Already in the pool\n    if (this.connections.has(conn.peer)) return;\n\n    const peerIds: string[] = conn.metadata.peerIds ?? [];\n    peerIds.forEach((peerId) => this.connectToPeer(peerId));\n\n    conn.on('data', (data: Message) => {\n      console.debug(\n        `[${this.peerId}] peer ${conn.peer} sent a message type=${data.type}`\n      );\n      // console.log(data);\n      if (data.type === 'seeds') {\n        _.each(data.peerIds, (peerId) => this.connectToPeer(peerId));\n      } else if (data.type === 'chat') {\n        this.conversation = [...this.conversation, ...data.lines];\n        this.conversation = _.uniqBy(this.conversation, (l) => l.id);\n      }\n\n      this.emit('update');\n    });\n\n    conn.on('close', () => this.connections.delete(conn.peer));\n    conn.on('error', () => this.connections.delete(conn.peer));\n\n    conn.on('open', () => {\n      this.connections.set(conn.peer, conn);\n\n      const seedsMsg: SeedsMessage = {\n        type: 'seeds',\n        peerIds: Array.from(this.connections.keys()),\n      };\n      this.send(seedsMsg);\n\n      const initialConv: ChatMessage = {\n        type: 'chat',\n        lines: this.conversation,\n      };\n      this.send(initialConv);\n\n      console.debug(`[${this.peerId}] peer ${conn.peer} connected`);\n    });\n  }\n\n  private send(msg: Message) {\n    this.connections.forEach((conn) => {\n      conn.send(msg);\n    });\n  }\n\n  public get error() {\n    return this.lastError;\n  }\n\n  public get loading() {\n    return this.isLoading;\n  }\n\n  public get chat() {\n    return this.conversation;\n  }\n\n  public sendMessage(msg: string) {\n    if (this.loading) throw new Error('not ready yet');\n\n    const line = {\n      id: randomId(),\n      content: msg,\n      sender: this.username ?? 'seed',\n    };\n    this.conversation.push(line);\n\n    const newMsg: ChatMessage = {\n      type: 'chat',\n      lines: [line],\n    };\n    this.send(newMsg);\n  }\n}\n\n// Tentative seed peer, might fail, already taken : normal\nconst gSeedPeer = new MessagingPeer();\n\nconst useMessagingPeer = (slug: string) => {\n  const [peer, setPeer] = useState<MessagingPeer>();\n  const [, setUpdateTime] = useState<number>();\n\n  useEffect(() => {\n    const p = new MessagingPeer(slug);\n    p.on('update', () => setUpdateTime(_.now()));\n    setPeer(p);\n  }, [slug]);\n\n  return peer;\n};\n\n// const gOtherPeer = new MessagingPeer(\n//   _.sample(['clems71', 'kebe', 'barber', 'xax', 'thibo', 'fredo', 'mat'])\n// );\n\ntype AppState = { type: 'login' } | { type: 'chat'; slug: string };\n\ninterface LoginPageProps {\n  onLogin?: (username: string) => void;\n}\n\nconst LoginPage = (props: LoginPageProps) => {\n  const [name, setName] = useState('');\n  const slug = _.kebabCase(name);\n\n  return (\n    <div>\n      <form>\n        <fieldset>\n          <label>Your name</label>\n          <input\n            type=\"text\"\n            placeholder=\"Erlich Bachman\"\n            value={name}\n            onChange={(evt) => setName(evt.target.value)}\n          />\n          <label>Generated slug</label>\n          <input type=\"text\" value={slug} readOnly={true} />\n          <input\n            className=\"button-primary\"\n            type=\"submit\"\n            value=\"Connect\"\n            disabled={slug.length < 3}\n            onClick={(e) => {\n              e.preventDefault();\n              if (props.onLogin) props.onLogin(slug);\n            }}\n          />\n        </fieldset>\n      </form>\n    </div>\n  );\n};\n\ninterface ChatPageProps {\n  slug: string;\n}\n\nconst ChatPage = (props: ChatPageProps) => {\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const peer = useMessagingPeer(props.slug);\n  const [currentLine, setCurrentLine] = useState<string>('');\n\n  const chat = peer?.chat ?? [];\n  const chatHistory = chat.map((l) => `${l.sender}: ${l.content}`).join('\\n');\n\n  useEffect(() => scrollToBottom(), [chatHistory]);\n\n  return (\n    <div>\n      <blockquote>\n        <p>\n          Welcome <strong>{props.slug}</strong>!\n        </p>\n      </blockquote>\n      {peer?.loading || (\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            peer?.sendMessage(currentLine);\n            setCurrentLine('');\n          }}\n        >\n          <fieldset>\n            <pre style={{ height: 300, overflow: 'scroll' }}>\n              {chatHistory}\n              <div ref={messagesEndRef} />\n            </pre>\n            <input\n              type=\"text\"\n              placeholder=\"Your message...\"\n              value={currentLine}\n              onChange={(evt) => setCurrentLine(evt.target.value)}\n            />\n          </fieldset>\n        </form>\n      )}\n    </div>\n  );\n};\n\nfunction App() {\n  const [appState, setAppState] = useState<AppState>({ type: 'login' });\n\n  return (\n    <div className=\"container\">\n      <h1>Peer Test</h1>\n      <div>\n        This app is a proof of concept. It demonstrates an UDP based chat. It\n        uses PeerJS.\n      </div>\n      {appState.type === 'login' && (\n        <LoginPage\n          onLogin={(slug) => {\n            setAppState({ type: 'chat', slug });\n          }}\n        />\n      )}\n      {appState.type === 'chat' && <ChatPage slug={appState.slug} />}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}